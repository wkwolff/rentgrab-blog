---
// Google Analytics component for production tracking
const GA_MEASUREMENT_ID = import.meta.env.PUBLIC_GA_MEASUREMENT_ID;
const isProd = import.meta.env.PROD;

// Only load analytics in production with a valid measurement ID
const shouldLoadAnalytics = isProd && GA_MEASUREMENT_ID && GA_MEASUREMENT_ID !== 'G-XXXXXXXXXX';
---

{shouldLoadAnalytics && (
  <>
    <!-- Google Analytics 4 -->
    <script async src={`https://www.googletagmanager.com/gtag/js?id=${GA_MEASUREMENT_ID}`}></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', '${GA_MEASUREMENT_ID}', {
        page_path: window.location.pathname,
        anonymize_ip: true,
        cookie_flags: 'SameSite=None;Secure',
        send_page_view: true
      });

      // Track Web Vitals
      if (import.meta.env.PUBLIC_ENABLE_WEB_VITALS === 'true') {
        // Track Core Web Vitals
        const reportWebVital = (metric) => {
          gtag('event', metric.name, {
            event_category: 'Web Vitals',
            event_label: metric.id,
            value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value),
            non_interaction: true,
          });
        };

        // Observe paint timing
        if ('PerformanceObserver' in window) {
          try {
            const paintObserver = new PerformanceObserver((list) => {
              for (const entry of list.getEntries()) {
                gtag('event', 'paint', {
                  event_category: 'Performance',
                  event_label: entry.name,
                  value: Math.round(entry.startTime),
                  non_interaction: true,
                });
              }
            });
            paintObserver.observe({ entryTypes: ['paint'] });
          } catch (e) {
            console.error('Paint observer error:', e);
          }

          // Observe largest contentful paint
          try {
            const lcpObserver = new PerformanceObserver((list) => {
              const entries = list.getEntries();
              const lastEntry = entries[entries.length - 1];
              gtag('event', 'LCP', {
                event_category: 'Web Vitals',
                value: Math.round(lastEntry.renderTime || lastEntry.loadTime),
                non_interaction: true,
              });
            });
            lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });
          } catch (e) {
            console.error('LCP observer error:', e);
          }

          // Track First Input Delay
          try {
            const fidObserver = new PerformanceObserver((list) => {
              for (const entry of list.getEntries()) {
                gtag('event', 'FID', {
                  event_category: 'Web Vitals',
                  value: Math.round(entry.processingStart - entry.startTime),
                  non_interaction: true,
                });
              }
            });
            fidObserver.observe({ entryTypes: ['first-input'] });
          } catch (e) {
            console.error('FID observer error:', e);
          }
        }
      }

      // Track errors
      window.addEventListener('error', (e) => {
        gtag('event', 'exception', {
          description: e.message,
          fatal: false,
        });
      });
    </script>
  </>
)}

{!shouldLoadAnalytics && import.meta.env.DEV && (
  <script>
    console.log('Analytics disabled in development mode');
  </script>
)}